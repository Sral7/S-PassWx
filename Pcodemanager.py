#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Sat Aug 12 22:39:12 2023
#

import wx
from wx.lib.mixins.listctrl import TextEditMixin
from wx.lib.masked import TextCtrl
import cryptography
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC as PBKDF2
import random as r
import string
import sqlite3 as sq
import hashlib
import base64
import datetime
import time

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade
connection = sq.connect('sites.db')
cursor = connection.cursor()

#cursor.execute('DROP TABLE Sites;')
#cursor.execute('DELETE FROM Sites')

#cursor.execute('DELETE FROM Users')
cursor.execute('''CREATE TABLE IF NOT EXISTS Users (
               id INTEGER PRIMARY KEY AUTOINCREMENT,
               username TEXT UNIQUE,
               password TEXT
               )''')


cursor.execute('''CREATE TABLE IF NOT EXISTS Sites(
               id INTEGER PRIMARY KEY AUTOINCREMENT,
               user_id INTEGER REFERENCES Users(id),
               site TEXT,
               username TEXT,
               password TEXT,
               email TEXT,
               URL TEXT,
               created_date TEXT,
               modified_date TEXT
               )''')

connection.commit()






class LoginDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyDialog1.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("dialog_1")
        self.SetSize((400,200))

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        label_1 = wx.StaticText(self, wx.ID_ANY, "SPassword Manager")
        label_1.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Javanese Text"))
        sizer_1.Add(label_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        grid_sizer_1 = wx.GridSizer(1, 2, 0, 0)
        sizer_1.Add(grid_sizer_1, 3, wx.EXPAND, 0)

        label_2 = wx.StaticText(self, wx.ID_ANY, "Username :")
        label_2.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_1.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.text_ctrl_1.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_1.Add(self.text_ctrl_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        grid_sizer_2 = wx.GridSizer(1, 2, 0, 0)
        sizer_1.Add(grid_sizer_2, 3, wx.EXPAND, 0)

        label_3 = wx.StaticText(self, wx.ID_ANY, "Password :")
        label_3.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_2.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.text_ctrl_2 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.text_ctrl_2.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_2.Add(self.text_ctrl_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_Create = wx.Button(self, wx.ID_ANY, "Create Account")
        sizer_2.Add(self.button_Create, 0, 0, 0)


        self.button_Login = wx.Button(self, wx.ID_ANY, "Login")
        sizer_2.Add(self.button_Login, 0, 0, 0)

        sizer_2.Realize()

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        
        self.Bind(wx.EVT_CLOSE,self.OnClose)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.CreateAccount, self.button_Create)
        self.Bind(wx.EVT_BUTTON, self.AuthenticateUser, self.button_Login)

        self.login_result = False 
        self.new_account = True
        # end wxGlade
    def OnClose(self,event):

        self.Destroy()

    def register_user(self,username,password):
        hashed_pass = hashlib.sha256(password.encode()).hexdigest()
        cursor.execute('INSERT INTO Users(username,password) VALUES (?,?)',(username,hashed_pass))
        

    def CheckUsername(self,username):
        cursor.execute('SELECT username FROM Users WHERE username = ?',(username,))
        existing_username =cursor.fetchone()
        return existing_username is None #return True if exisiting username is not None(if it exists)
    
    def CreateAccount(self, event):  # wxGlade: MyDialog1.<event_handler>
        print("Event handler 'CreateAccount' not implemented!")
        username = self.text_ctrl_1.GetValue()
        password = self.text_ctrl_2.GetValue()

        if self.CheckUsername(username):
            self.register_user(username,password)
            self.login_result = True
            self.new_account= True
            self.EndModal(wx.ID_OK)
        else:
            wx.MessageBox("Username Already Exists", "Error", wx.OK | wx.ICON_ERROR)

        connection.commit()

    def AuthenticatePass(self,username,password):
        hashed_pass = hashlib.sha256(password.encode()).hexdigest()
        cursor.execute('SELECT password FROM Users WHERE username = ?',(username,))
        stored_pass = cursor.fetchone()
        print(stored_pass)
        if stored_pass and stored_pass[0] == hashed_pass:
            print('Authenticated')
            return True
        print('Not Valid')
        return False
        
    def AuthenticateUser(self, event):  # wxGlade: MyDialog1.<event_handler>
        print("Event handler 'AuthenticateUser' not implemented!")
        username = self.text_ctrl_1.GetValue()
        password = self.text_ctrl_2.GetValue()

        self.login_result = self.AuthenticatePass(username,password)

        if self.login_result:
            self.new_account = False
            self.EndModal(wx.ID_OK)
        else:
            wx.MessageBox("Authentication failed.", "Error", wx.OK | wx.ICON_ERROR)
    
    def GetResult(self):
        return self.login_result
    def GetNewAccount(self):
        return self.new_account
    def GetUsername(self):
        return self.text_ctrl_1.GetValue()
    def GetPass(self):
        return self.text_ctrl_2.GetValue()
    def GetPassHash(self):
        hashed_pass = hashlib.sha256((self.text_ctrl_2.GetValue()).encode()).hexdigest()
        return hashed_pass
    
class Pin(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Pin.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((400, 200))
        self.SetTitle("dialog_5")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)

        enter_pin_label = wx.StaticText(self, wx.ID_ANY, "ENTER PIN :", style=wx.ALIGN_CENTER_HORIZONTAL)
        enter_pin_label.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Javanese Text"))
        sizer_3.Add(enter_pin_label, 2, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 10)

        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.text_ctrl_1.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        sizer_3.Add(self.text_ctrl_1, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 10)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_ANY, "OK")
        sizer_2.Add(self.button_OK, 0, 0, 0)

        sizer_2.Realize()

        self.SetSizer(sizer_1)

        self.SetAffirmativeId(self.button_OK.GetId())
        

        self.Layout()

        self.Bind(wx.EVT_BUTTON,self.CheckInput, self.button_OK)

    def CheckInput(self,event):
        input1 = self.text_ctrl_1.GetValue()
        if len(input1) == 8 and input1.isdigit():
            self.EndModal(wx.ID_OK)

        else:
            wx.MessageBox("Input is Not Valid", "Error", wx.OK | wx.ICON_ERROR)
    
    def GetPin(self):
        return self.text_ctrl_1.GetValue()
        # end wxGlade

# end of class Pin

class CreatePin(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: CreatePin.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((400, 250))
        self.SetTitle("dialog_5")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        enter_pin_label_copy_1 = wx.StaticText(self, wx.ID_ANY, "Enter 8 Digit Pin", style=wx.ALIGN_CENTER_HORIZONTAL)
        enter_pin_label_copy_1.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Javanese Text"))
        sizer_1.Add(enter_pin_label_copy_1, 2, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 10)

        label_1 = wx.StaticText(self, wx.ID_ANY, "Without This Pin All Data Will Be Inaccesible\nDo Not Forget This Pin", style=wx.ALIGN_CENTER_HORIZONTAL)
        label_1.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_1.Add(label_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 0)

        grid_sizer_1 = wx.GridSizer(2, 2, 0, 2)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)

        enter_pin_label = wx.StaticText(self, wx.ID_ANY, "ENTER PIN :", style=wx.ALIGN_CENTER_HORIZONTAL)
        enter_pin_label.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Javanese Text"))
        grid_sizer_1.Add(enter_pin_label, 2, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 10)

        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.text_ctrl_1.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_1.Add(self.text_ctrl_1, 1, wx.ALL, 10)

        enter_pin_label_copy = wx.StaticText(self, wx.ID_ANY, "CONFIRM PIN :", style=wx.ALIGN_CENTER_HORIZONTAL)
        enter_pin_label_copy.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Javanese Text"))
        grid_sizer_1.Add(enter_pin_label_copy, 2, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 10)

        self.text_ctrl_2 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.text_ctrl_2.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_1.Add(self.text_ctrl_2, 1, wx.ALL, 10)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_ANY, "OK")
        sizer_2.Add(self.button_OK, 0, 0, 0)

        sizer_2.Realize()

        self.SetSizer(sizer_1)

        self.SetAffirmativeId(self.button_OK.GetId())

        self.Bind(wx.EVT_BUTTON,self.CheckInputs, self.button_OK)

        self.Layout()

    def CheckInputs(self,event):
        input_1 = self.text_ctrl_1.GetValue()
        input_2 = self.text_ctrl_2.GetValue()

        if input_1 == input_2 and len(input_1)== 8 and input_1.isdigit():
            self.EndModal(wx.ID_OK)
        else:
            wx.MessageBox("Input is Not Valid", "Error", wx.OK | wx.ICON_ERROR)



    def GetPin(self):
        return self.text_ctrl_1.GetValue()
        # end wxGlade
            


# end of class MyDialog2
class MyFrame(wx.Frame):
    def __init__(self, *args, Username ="", pin ="",hashed_pass="", **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((800, 500))
        self.SetTitle("Password Manager")
        self.pin = pin
        
        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Settings", "")
        self.Bind(wx.EVT_MENU, self.OpenSettings, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Delete User", "")
        self.Bind(wx.EVT_MENU, self.DeleteUser, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Exit", "")
        self.Bind(wx.EVT_MENU, self.Logout, item)
        
        self.frame_menubar.Append(wxglade_tmp_menu, "User")
        wxglade_tmp_menu = wx.Menu()
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end

        # Tool Bar
        self.frame_toolbar = wx.ToolBar(self, -1)
        self.SetToolBar(self.frame_toolbar)
        self.frame_toolbar.Realize()
        # Tool Bar end

        self.panel_1 = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_RAISED)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.list_ctrl_1 = wx.ListCtrl(self.panel_1, wx.ID_ANY, style=wx.BORDER_SUNKEN | wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
        self.list_ctrl_1.AppendColumn("Site", format=wx.LIST_FORMAT_LEFT, width=248)
        self.list_ctrl_1.AppendColumn("Username", format=wx.LIST_FORMAT_LEFT, width=263)
        self.list_ctrl_1.AppendColumn("Password", format=wx.LIST_FORMAT_LEFT, width=233)
        self.list_ctrl_1.AppendColumn("HiddenPassword", wx.LIST_FORMAT_LEFT, width=0)
        sizer_1.Add(self.list_ctrl_1, 3, wx.ALL | wx.EXPAND, 3)

        self.sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.sizer_2, 1, wx.ALL | wx.EXPAND, 0)

        self.button_4 = wx.Button(self.panel_1, wx.ID_ANY, "More Info")
        self.sizer_2.Add(self.button_4, 0, wx.ALL | wx.EXPAND, 5)

        self.button_5 = wx.Button(self.panel_1, wx.ID_ANY, "Delete Site")
        self.sizer_2.Add(self.button_5, 0, wx.ALL | wx.EXPAND, 5)


        grid_sizer_2 = wx.GridSizer(1, 3, 0, 3)
        sizer_1.Add(grid_sizer_2, 1, wx.EXPAND, 0)

        self.button_1 = wx.Button(self.panel_1, wx.ID_ANY, "Add New Passcode")
        self.button_1.SetMinSize((250, 63))
        self.button_1.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Sitka Banner"))
        grid_sizer_2.Add(self.button_1, 0, wx.ALIGN_CENTER, 0)

        self.button_2 = wx.Button(self.panel_1, wx.ID_ANY, "Edit Sites")
        self.button_2.SetMinSize((250, 63))
        self.button_2.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Sitka Banner"))
        grid_sizer_2.Add(self.button_2, 0, wx.ALIGN_CENTER, 0)

        self.button_3 = wx.Button(self.panel_1, wx.ID_ANY, "Logout")
        self.button_3.SetMinSize((250, 63))
        self.button_3.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Sitka Banner"))
        grid_sizer_2.Add(self.button_3, 0, wx.ALIGN_CENTER, 0)

        self.panel_1.SetSizer(sizer_1)


        self.sizer_2.Hide(self.button_4)
        self.sizer_2.Hide(self.button_5)
        self.panel_1.Layout()



        self.Layout()

        self.crypt_key = self.MasterKey(pin,hashed_pass,Username)
        
        print(self.crypt_key,'INITIAL KEY\n INTIAL KEY')

        self.Username = Username
        self.hashed_pass = hashed_pass

        self.AddSites()

        self.Bind(wx.EVT_BUTTON, self.AddNewPasscode, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.EditEntries, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.Logout, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.OpenInfoDialog, self.button_4)
        self.Bind(wx.EVT_BUTTON, self.DeleteRow, self.button_5)

        self.list_ctrl_1.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnItemSelected)
        self.list_ctrl_1.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnItemDeselected)
        # end wxGlade
    def MasterKey(self,pin,password,username):
        password_hash = hashes.Hash(hashes.SHA512())
        password_hash.update(password.encode())
        password_hash = password_hash.finalize()

        pin_hash = hashes.Hash(hashes.SHA512())
        pin_hash.update(pin.encode())
        pin_hash = pin_hash.finalize()

        master_password = password_hash + pin_hash

        master_password_hash = hashes.Hash(hashes.SHA512())
        master_password_hash.update(master_password)
        master_password_hash = master_password_hash.finalize()

        username_hash = hashes.Hash(hashes.SHA512())
        username_hash.update(username.encode())
        username_hash = username_hash.finalize()

        salt = username_hash + pin_hash
        kdf = PBKDF2(hashes.SHA512(),iterations=1000000,salt = salt,length= 32) 
        key = kdf.derive(master_password_hash)
        key_base64 = base64.urlsafe_b64encode(key)
        f = Fernet(key_base64)
        return f
    
    def Encryption(self,crypt_key,password):
        encrypt_password = crypt_key.encrypt(password.encode())
        return encrypt_password
    
    def Decryption(self,crypt_key,encrypt_password):
        passcode = crypt_key.decrypt(encrypt_password)
        return passcode
    
    def AddSites(self):

        cursor.execute('SELECT id FROM Users WHERE username = ?',(self.Username,))
        self.user_id = cursor.fetchone()[0]

        cursor.execute('SELECT site,username,password FROM Sites WHERE user_id =?',(self.Username,))
        sites_data = cursor.fetchall()
        print(sites_data)
        sites =[]
        usernames = []
        passwords = []
        for site,username,password in sites_data:
            sites.append(site)
            usernames.append(username)
            passwords.append(self.Decryption(self.crypt_key,password))

        print(sites,usernames,passwords)

        for i,j in enumerate(sites):
            self.AddRow(sites[i],usernames[i],passwords[i])




    def AddNewPasscode(self, event):  # wxGlade: MyFrame.<event_handler>
        dialog = MyDialog(self,username=self.Username)
        result = dialog.ShowModal()
        if result == wx.ID_SAVE:
            site_name = dialog.text_ctrl_1.GetValue()
            username = dialog.text_ctrl_2.GetValue()
            password = dialog.text_ctrl_3.GetValue()
            encrypt_password = self.Encryption(self.crypt_key, password)
            self.AddRow(site_name, username, password)
            current_datetime = datetime.datetime.now()
            
            cursor.execute('INSERT INTO SITES(user_id,site,username,password,email,url,created_date,modified_date) VALUES(?,?,?,?,?,?,?,?)',
                           (self.Username,site_name,username,encrypt_password,None,None,current_datetime,current_datetime))
            connection.commit()
            cursor.execute('SELECT * FROM Sites')
            sites_data = cursor.fetchall()
            print("Sites data:")
            for row in sites_data:
                print(row)

            

        dialog.Destroy()
    
    def AddRow(self ,site ,username,password):
        index = self.list_ctrl_1.InsertItem(self.list_ctrl_1.GetItemCount(),site)
        self.list_ctrl_1.SetItem(index,1,username)
        self.list_ctrl_1.SetItem(index,2, '*****')
        self.list_ctrl_1.SetItem(index, 3, password)

    def DeleteRow(self, event):  # wxGlade: MyFrame.<event_handler>
        dialog = ConfirmationRowDelete(self)
        result = dialog.ShowModal()

        dialog.Destroy()
        if result == wx.ID_OK:
            site = self.list_ctrl_1.GetItem(self.selected_index,0).GetText()
            cursor.execute('DELETE FROM Sites WHERE site = ?',(site,))
            connection.commit
            self.list_ctrl_1.DeleteItem(self.selected_index)
            
        

    def OpenInfoDialog(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'OpenInfoDialog' not implemented!")
        actual_password = self.list_ctrl_1.GetItem(self.selected_index, 3).GetText()
        site = self.list_ctrl_1.GetItem(self.selected_index,0).GetText()
        print(site)
        print(self.user_id)

        cursor.execute('SELECT * FROM Sites WHERE site = ? AND user_id =?',(site,self.Username))
        result_row = cursor.fetchone()
        print(result_row)
        if result_row:
            username = result_row[3]
            email = result_row[5] if result_row[5] != 'NULL' else None
            url = result_row[6] if result_row[6] != 'NULL' else None
            created_date = result_row[7]
            modified_date = result_row[8]

        

        cursor.execute('SELECT * FROM Sites')
        sites_data = cursor.fetchall()
        print("Sites data:")
        for row in sites_data:
            print(row)


        dialog = InfoDialog(self,username=username,password=actual_password,user_id=self.Username,created_date=created_date,
                            modified_date=modified_date,site=site,email=email,url=url)
        result = dialog.ShowModal()
        if result == wx.ID_OK:
            print('ok')
        event.Skip()

    def Logout(self, event):  # wxGlade: MyFrame.<event_handler>

        self.Destroy()

    def OpenSettings(self,event):
        
        dialog = LoginDialog(self)
        result = dialog.ShowModal()
        if dialog.GetResult():
            username = dialog.GetUsername()
            password = dialog.GetPass()

            dialog.Destroy()
            dialog = Settings(self,username = username,password = password,pin = self.pin,hashed_pass=self.hashed_pass)
            result = dialog.ShowModal()





    
    def DeleteUser(self,event):
        dialog = Confirmation(self)
        result=dialog.ShowModal()
        if result == wx.ID_OK:
            cursor.execute('DELETE FROM Users WHERE id = ?',(self.user_id,))
            cursor.execute('DELETE FROM Sites WHERE user_id =?',(self.Username,))
            connection.commit

            self.Destroy()
        event.Skip()

        

    def GetListData(self):
        data = []
        for index in range(self.list_ctrl_1.GetItemCount()):
            site = self.list_ctrl_1.GetItemText(index, 0)
            username = self.list_ctrl_1.GetItemText(index, 1)
            password = self.list_ctrl_1.GetItemText(index, 3)
            data.append((site, username, password))
        return data
    def OnItemSelected(self, event):
        self.sizer_2.Show(self.button_4)
        self.sizer_2.Show(self.button_5)
        self.panel_1.Layout()
        
        self.selected_index = event.GetIndex()
        actual_password = self.list_ctrl_1.GetItem(self.selected_index, 3).GetText()
        data_object = wx.TextDataObject(actual_password)
        if wx.TheClipboard.Open():
            wx.TheClipboard.SetData(data_object)
            wx.TheClipboard.Close()
        self.list_ctrl_1.SetItem(self.selected_index, 2, actual_password)


    def OnItemDeselected(self, event):
        self.sizer_2.Hide(self.button_4)
        self.sizer_2.Hide(self.button_5)
        self.panel_1.Layout()
        index = event.GetIndex()
        masked_password = '******'
        self.list_ctrl_1.SetItem(index, 2, masked_password)

    def EditEntries(self, event):
            current_data = self.GetListData()
            edit_dialog = EditListDialog(self, current_data, Username = self.Username,frame_instance=self,crypt_key=self.crypt_key)
            result = edit_dialog.ShowModal()
            if result == wx.ID_APPLY:
                edited_data = edit_dialog.GetEditedData()
                for index, edited_item in enumerate(edited_data):
                    self.UpdateRow(index, edited_item)

            edit_dialog.Destroy()
            
   


    def UpdateRow(self, index, item):
        self.list_ctrl_1.SetItem(index, 0, item[0])
        self.list_ctrl_1.SetItem(index, 1, item[1])
        self.list_ctrl_1.SetItem(index, 2, '******')
        self.list_ctrl_1.SetItem(index,3, item[2])
        

# end of class MyFrame

class Confirmation(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Confirmation.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("dialog_3")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        label_2 = wx.StaticText(self, wx.ID_ANY, "DELETE USER \nAND ALL ASSOCIATED \nDATA?", style=wx.ALIGN_CENTER_HORIZONTAL)
        label_2.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Javanese Text"))
        sizer_1.Add(label_2, 2, wx.ALIGN_CENTER_HORIZONTAL, 0)

        label_1 = wx.StaticText(self, wx.ID_ANY, "This Action Is Non Reversible, All Data Will Be Permanently Deleted")
        label_1.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_1.Add(label_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 7)

        grid_sizer_1 = wx.GridSizer(1, 2, 0, 4)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)

        self.button_1 = wx.Button(self, wx.ID_CANCEL, "")
        self.button_1.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Sitka Banner"))
        grid_sizer_1.Add(self.button_1, 0, wx.ALIGN_CENTER, 0)

        self.button_2 = wx.Button(self, wx.ID_OK, "")
        self.button_2.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Sitka Banner"))
        grid_sizer_1.Add(self.button_2, 0, wx.ALIGN_CENTER, 0)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.Layout()

class ConfirmationRowDelete(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Confirmation.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("dialog_3")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        label_2 = wx.StaticText(self, wx.ID_ANY, "DELETE SITE \nAND ALL ASSOCIATED \nDATA?", style=wx.ALIGN_CENTER_HORIZONTAL)
        label_2.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Javanese Text"))
        sizer_1.Add(label_2, 2, wx.ALIGN_CENTER_HORIZONTAL, 0)

        label_1 = wx.StaticText(self, wx.ID_ANY, "This Action Is Non Reversible, All Data Will Be Permanently Deleted")
        label_1.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_1.Add(label_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 7)

        grid_sizer_1 = wx.GridSizer(1, 2, 0, 4)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)

        self.button_1 = wx.Button(self, wx.ID_CANCEL, "")
        self.button_1.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Sitka Banner"))
        grid_sizer_1.Add(self.button_1, 0, wx.ALIGN_CENTER, 0)

        self.button_2 = wx.Button(self, wx.ID_OK, "")
        self.button_2.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Sitka Banner"))
        grid_sizer_1.Add(self.button_2, 0, wx.ALIGN_CENTER, 0)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.Layout()



class MyDialog(wx.Dialog):
    def __init__(self, *args, username ="", **kwds):
        # begin wxGlade: MyDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("dialog")
        self.username = username
        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_1 = wx.GridSizer(2, 3, 10, 5)
        sizer_1.Add(grid_sizer_1, 5, wx.EXPAND, 0)

        label_1 = wx.StaticText(self, wx.ID_ANY, "Enter Site Name:", style=wx.ALIGN_CENTER_HORIZONTAL)
        label_1.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_1.Add(label_1, 0, wx.ALIGN_BOTTOM | wx.ALIGN_CENTER_HORIZONTAL, 0)

        label_2 = wx.StaticText(self, wx.ID_ANY, "Enter Username:")
        label_2.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_1.Add(label_2, 0, wx.ALIGN_BOTTOM | wx.ALIGN_CENTER_HORIZONTAL, 0)

        label_3 = wx.StaticText(self, wx.ID_ANY, "Enter Passcode:")
        label_3.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_1.Add(label_3, 0, wx.ALIGN_BOTTOM | wx.ALIGN_CENTER_HORIZONTAL, 0)

        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "")
        grid_sizer_1.Add(self.text_ctrl_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        self.text_ctrl_2 = wx.TextCtrl(self, wx.ID_ANY, "")
        grid_sizer_1.Add(self.text_ctrl_2, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        self.text_ctrl_3 = wx.TextCtrl(self, wx.ID_ANY, "")
        grid_sizer_1.Add(self.text_ctrl_3, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_3, 1, wx.ALL | wx.EXPAND, 1)

        self.button_1 = wx.Button(self, wx.ID_ANY, "Generate A New Passcode", style=wx.BU_EXACTFIT | wx.BU_TOP)
        sizer_3.Add(self.button_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 0)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)



        self.button_SAVE = wx.Button(self, wx.ID_ANY, "Save")
        sizer_2.Add(self.button_SAVE)





        sizer_2.Realize()

        self.SetSizer(sizer_1)

        self.SetAffirmativeId(self.button_SAVE.GetId())

        self.Bind(wx.EVT_BUTTON,self.CheckInput, self.button_SAVE)
        self.Bind(wx.EVT_CLOSE,self.CloseDialog)
        

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.GeneratePasswordDialog, self.button_1)
        # end wxGlade
    def CloseDialog(self,event):
        self.Destroy()
    def CheckInput(self,event):
        site = self.text_ctrl_1.GetValue()
        cursor.execute('SELECT * FROM Sites WHERE site = ? AND  user_id = ? ',(site,self.username))
        exisiting_site= cursor.fetchone()
        if exisiting_site:
            wx.MessageBox("Site Already Exists", "Error", wx.OK | wx.ICON_ERROR)
        else:
            self.EndModal(wx.ID_SAVE)
            

    def GeneratePasswordDialog(self, event):  # wxGlade: MyDialog.<event_handler>
        dialog = GenPassword(self)
        result = dialog.ShowModal()
        if result == wx.ID_SAVE:
            generated_passcode = dialog.get_entered_data()
            self.text_ctrl_3.SetValue(generated_passcode)


class EditableTextListCtrl(wx.ListCtrl, TextEditMixin):
    def __init__(self, parent, ID, pos=wx.DefaultPosition,
                 size=wx.DefaultSize, style=0):
        wx.ListCtrl.__init__(self, parent, ID, pos, size, style)
        TextEditMixin.__init__(self)

class EditListDialog(wx.Dialog):
    def __init__(self, parent, data, Username, frame_instance, crypt_key):
        super().__init__(parent, title="Edit Entries")
        self.frame_instance = frame_instance
        self.crypt_key = crypt_key
        sizer = wx.BoxSizer(wx.VERTICAL)
        self.edited_data = []
        self.Username = Username
        self.list_ctrl = EditableTextListCtrl(self, wx.ID_ANY, style=wx.LC_REPORT | wx.LC_EDIT_LABELS)
        self.list_ctrl.InsertColumn(0, "Site", width=150)
        self.list_ctrl.InsertColumn(1, "Username", width=150)
        self.list_ctrl.InsertColumn(2, "Password", width=150)
        self.data = data
        for item in data:
            index = self.list_ctrl.InsertItem(self.list_ctrl.GetItemCount(), item[0])
            self.list_ctrl.SetItem(index, 1, item[1])
            self.list_ctrl.SetItem(index, 2, item[2])

        sizer.Add(self.list_ctrl, 1, wx.ALL | wx.EXPAND, 10)

        self.button_APPLY = wx.Button(self, wx.ID_APPLY, "Apply")
        sizer.Add(self.button_APPLY, 0, wx.ALIGN_RIGHT | wx.ALL, 10)

        self.SetSizerAndFit(sizer)

        self.Bind(wx.EVT_BUTTON, self.OnApply, self.button_APPLY)

    def OnApply(self,event):
        self.edited_data = []
        for index in range(self.list_ctrl.GetItemCount()):
            site = self.list_ctrl.GetItemText(index, 0)
            username = self.list_ctrl.GetItemText(index, 1)
            password = self.list_ctrl.GetItemText(index, 2)
            self.edited_data.append((site, username, password,index))
        print(self.edited_data)

        sites = []
        for site in self.data:
            sites.append(site[0])
        print(sites)
        cursor.execute('SELECT id FROM Users WHERE username = ?',(self.Username,))
        self.user_id = cursor.fetchone()[0]

        for info in self.edited_data:
            site,username,password,index = info
            print(site,username,password,index)
            enc_password = self.frame_instance.Encryption(self.crypt_key,password)
            print(self.user_id)

            cursor.execute('SELECT * FROM Sites')
            sites_data = cursor.fetchall()
            print(sites_data,'before')
            
            cursor.execute('SELECT id From Sites where site = ? AND user_id = ?',(sites[index],self.Username))
            row_id = cursor.fetchone()
            print(row_id)
            current_datetime = datetime.datetime.now()
            if row_id:
                row_id = row_id[0]
                print(row_id)
                cursor.execute('UPDATE Sites SET site= ?,username= ?,password = ?, modified_date = ? WHERE id =?',(site,username,enc_password,current_datetime,row_id))
                connection.commit()
            
        cursor.execute('SELECT * FROM Sites')
        sites_data = cursor.fetchall()
        print("Sites data:",'Updated')
        for row in sites_data:
            print(row)

        
        self.EndModal(wx.ID_APPLY)

    def GetEditedData(self):
        return self.edited_data               
            

# end of class MyDialog

class GenPassword(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("dialog")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_3, 0, wx.ALL | wx.EXPAND, 1)

        self.button_1 = wx.Button(self, wx.ID_ANY, "Generate Passcode", style=wx.BU_EXACTFIT | wx.BU_TOP)
        sizer_3.Add(self.button_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 0)

        grid_sizer_1 = wx.GridSizer(1, 3, 10, 5)
        sizer_1.Add(grid_sizer_1, 1, wx.ALL | wx.EXPAND, 0)

        self.window_1 = wx.SplitterWindow(self, wx.ID_ANY)
        self.window_1.SetMinimumPaneSize(20)
        grid_sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)

        self.window_1_pane_1 = wx.Panel(self.window_1, wx.ID_ANY)

        sizer_6 = wx.BoxSizer(wx.VERTICAL)

        self.check_list_box_1 = wx.CheckListBox(self.window_1_pane_1, wx.ID_ANY, choices=["!", "+", u"”", "#", "$", "%", "&", ")", "(", "*", ",", "-", ".", "/", ":", ";", "<", ">", "=", "?", "@", "[", "]", "{", "}"], style=wx.LB_MULTIPLE | wx.LB_NEEDED_SB | wx.LB_SORT)
        self.check_list_box_1.SetMinSize((68, 50))
        sizer_6.Add(self.check_list_box_1, 0, wx.EXPAND, 0)

        self.checkbox_1 = wx.CheckBox(self.window_1_pane_1, wx.ID_ANY, "Select All")
        sizer_6.Add(self.checkbox_1, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 0)

        self.window_1_pane_2 = wx.Panel(self.window_1, wx.ID_ANY)

        sizer_5 = wx.BoxSizer(wx.VERTICAL)

        self.combo_box_2 = wx.ComboBox(self.window_1_pane_2, wx.ID_ANY, choices=["8", "9", "10", "11", "12", "13", "", "15", "16", "17", "18"], style=wx.CB_DROPDOWN)
        self.combo_box_2.SetSelection(4)
        sizer_5.Add(self.combo_box_2, 0, wx.ALL, 3)

        self.choice_1 = wx.Choice(self.window_1_pane_2, wx.ID_ANY, choices=["Full Random", "Prounceable Password"])
        self.choice_1.SetSelection(0)
        sizer_5.Add(self.choice_1, 0, wx.ALL | wx.EXPAND, 3)

        self.check_list_box_2 = wx.CheckListBox(self, wx.ID_ANY, choices=["At Least One Uppercase", "At Least One Lowercase", "At Least One Special Character", "At Least One Digit"], style=wx.LB_HSCROLL | wx.LB_MULTIPLE | wx.LB_NEEDED_SB)
        grid_sizer_1.Add(self.check_list_box_2, 0, wx.ALL | wx.EXPAND, 0)

        self.label = wx.StaticText(self, wx.ID_ANY, "Password")
        grid_sizer_1.Add(self.label, 0, 0, 0)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_CENTER_HORIZONTAL, 5)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        self.button_SAVE = wx.Button(self, wx.ID_SAVE, "")
        self.button_SAVE.SetDefault()
        sizer_2.AddButton(self.button_SAVE)

        sizer_2.Realize()

        self.window_1_pane_2.SetSizer(sizer_5)

        self.window_1_pane_1.SetSizer(sizer_6)

        self.window_1.SplitHorizontally(self.window_1_pane_1, self.window_1_pane_2)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.button_SAVE.Bind(wx.EVT_BUTTON, self.on_save)


        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()
        self.Bind(wx.EVT_CHOICE,self.OnChoiceSelect,self.choice_1)
        self.Bind(wx.EVT_BUTTON, self.GeneratePassword, self.button_1)
        self.checkbox_1.Bind(wx.EVT_CHECKBOX, self.OnCheckAll)
        # end wxGlade

    def on_save(self, event):
        self.entered_data = self.label.GetLabel()
        self.SetReturnCode(wx.ID_SAVE)  # Set the return code to wx.ID_SAVE

        self.Destroy()  # Close the dialog

    def get_entered_data(self):
        return self.entered_data

    def GeneratePassword(self, event):  # wxGlade: MyDialog.<event_handler>
        print(self.label)
        print("Event handler 'GeneratePassword' not implemented!")
        checked_indices = self.check_list_box_1.GetCheckedItems()
        special_characters = [self.check_list_box_1.GetString(idx) for idx in checked_indices]
        print(special_characters)

        length = int(self.combo_box_2.GetStringSelection())
        print(length)

        gentype = self.choice_1.GetSelection()
        print(gentype)

        requierments = self.check_list_box_2.GetCheckedItems()
        print(requierments)

        passcode = []
        if gentype == 0:
            for i in requierments:
                if i == 0:
                    passcode.append('U')
                if i == 1:
                    passcode.append('L')
                if i == 2:
                    passcode.append('S')
                if i == 3:
                    passcode.append('D')
            randpass =[]
            weights = [3,6,1,3]
            choices = ['U', 'L', 'S', 'D']
            if not special_characters:
                choices = ['U', 'L', 'D']
            for i in range(length - len(passcode)):
                random_char = r.choices(choices, weights=weights)[0]
                randpass.append(random_char)
            print(randpass)
            passcode = passcode + randpass
            print(passcode)
            r.shuffle(passcode)
            print(passcode)
            for ind,type in enumerate(passcode):
                if type == 'U':
                    passcode[ind] = r.choice(string.ascii_uppercase)
                if type =='L':
                    passcode[ind]= r.choice(string.ascii_lowercase)
                if type == 'S':
                    passcode[ind]= r.choice(special_characters)
                if type == 'D':
                    passcode[ind] = str(r.randint(0,9))
            r.shuffle(passcode)

        if gentype == 1:
            file_path = "C:/Users/larsc/AppData/Local/Programs/Python/Python311/text.txt"
            with open(file_path,'r') as file:
                lines = file.readlines()
            file.close()
            string_list = [line.strip().split() for line in lines]
            r.shuffle(string_list)
            passcode =[]
            
            while len(passcode) < length:
                print(len(passcode),length,'min for extra string', length -6)
                if len(passcode) < length - 6:
                    string1 = ''.join(r.choice(string_list)).capitalize()
                    print(string1)
                    for i in string1:
                        passcode.append(i)
                    print(passcode)
                    
                else:
                    if 2 in requierments:
                        if r.random()<0.5:
                            passcode.append(r.choice(special_characters))
                            passcode.append(str(r.randint(0,9)))
                        else:
                            passcode.append(str(r.randint(0,9)))         
                            passcode.append(r.choice(special_characters))
 
                        for i in range(length-len(passcode)):
                            if r.random() < 0.75:
                                passcode.append(str(r.randint(0,9)))
                            else:
                                passcode.append(r.choice(special_characters))
                           
                    else:
                        for i in range(length-len(passcode)):
                            passcode.append(str(r.randint(0,9)))



            print(passcode)
            print(''.join(passcode),'final')

        
        
        passcode = ''.join(passcode)
        print(passcode)
        self.label.SetLabel(passcode)
        
        

    def OnCheckAll(self,event):
        check_all_state = self.checkbox_1.GetValue()
        for idx in range(self.check_list_box_1.GetCount()):
            self.check_list_box_1.Check(idx, check_all_state)
    
    def OnChoiceSelect(self,event):
        selected_option = self.choice_1.GetSelection()
        if selected_option == 1:
            self.check_list_box_2.Check(0)
            self.check_list_box_2.Check(1)
            self.check_list_box_2.Check(3)
# end of class MyDialog

class InfoDialog(wx.Dialog):
    def __init__(self, *args, username='',password='',created_date = '',modified_date ='',site = '',user_id ='',url='',email='',**kwds):
        # begin wxGlade: InfoDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((500, 500))
        self.SetTitle("dialog_4")

        self.user_id = user_id
        self.site = site
        
        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)

        label_1 = wx.StaticText(self, wx.ID_ANY, "Site Name", style=wx.ALIGN_CENTER_HORIZONTAL)
        label_1.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Javanese Text"))
        sizer_3.Add(label_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        grid_sizer_1 = wx.GridSizer(1, 2, 0, 0)
        sizer_3.Add(grid_sizer_1, 1, wx.EXPAND, 0)

        label_2 = wx.StaticText(self, wx.ID_ANY, "Username :")
        label_2.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_1.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        label_8 = wx.StaticText(self, wx.ID_ANY, f"{username}")
        label_8.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_1.Add(label_8, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.LEFT, 7)

        grid_sizer_2 = wx.GridSizer(1, 2, 0, 0)
        sizer_3.Add(grid_sizer_2, 1, wx.EXPAND, 0)

        label_3 = wx.StaticText(self, wx.ID_ANY, "Password :")
        label_3.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_2.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        label_9 = wx.StaticText(self, wx.ID_ANY, f"{password}")
        label_9.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_2.Add(label_9, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.LEFT, 7)



        grid_sizer_3 = wx.GridSizer(1, 2, 0, 0)
        sizer_3.Add(grid_sizer_3, 1, wx.EXPAND, 0)

        label_4 = wx.StaticText(self, wx.ID_ANY, "Email :")
        label_4.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_3.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.BOTTOM | wx.RIGHT, 20) 


        if email:
            print('email exists')
            self.email_label = wx.StaticText(self,wx.ID_ANY,f"{email}")
            self.email_label.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
            grid_sizer_3.Add(self.email_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM, 22)
        else:
            self.email_label = wx.StaticText(self,wx.ID_ANY,"")
            self.email_label.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
            grid_sizer_3.Add(self.email_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM, 22)


        grid_sizer_4 = wx.GridSizer(1, 2, 0, 0)
        sizer_3.Add(grid_sizer_4, 1, wx.EXPAND, 0)

        label_7 = wx.StaticText(self, wx.ID_ANY, "Site URL :")
        label_7.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_4.Add(label_7, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.BOTTOM | wx.RIGHT, 20)

        if url:
            self.url_label = wx.StaticText(self, label=f"{url}", style=wx.ST_ELLIPSIZE_MIDDLE)
            self.url_label.Bind(wx.EVT_LEFT_DOWN, self.on_label_click)
            
            self.url_label.SetForegroundColour(wx.BLUE)
            self.url_label.SetFont(wx.Font(wx.FontInfo(12).Underlined()))
            grid_sizer_4.Add(self.url_label,0,wx.ALIGN_CENTER_VERTICAL  | wx.BOTTOM , 22)


        else:
            self.url_label= wx.StaticText(self,wx.ID_ANY,'')
            self.url_label.SetFont(wx.Font(12,wx.FONTFAMILY_DEFAULT,wx.FONTSTYLE_NORMAL,wx.FONTWEIGHT_NORMAL,0,"Javanese Text"))
            grid_sizer_4.Add(self.url_label,0,wx.ALIGN_CENTER_VERTICAL  | wx.BOTTOM , 22)


        label_5 = wx.StaticText(self, wx.ID_ANY, f"{created_date}")
        sizer_3.Add(label_5, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        label_6 = wx.StaticText(self, wx.ID_ANY, f"{modified_date}")
        sizer_3.Add(label_6, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)

        self.button_1 = wx.Button(self, wx.ID_ANY, "Edit Info")
        self.button_1.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Sitka Banner"))
        sizer_3.Add(self.button_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_SAVE = wx.Button(self, wx.ID_ANY, "Save")
        sizer_2.Add(self.button_SAVE, 0, 0, 0)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.SetSizer(sizer_1)

        self.SetAffirmativeId(self.button_SAVE.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()

        self.Bind(wx.EVT_BUTTON,self.EditInfo,self.button_1)

        self.Bind(wx.EVT_BUTTON, self.UpdateData, self.button_SAVE)
        # end wxGlade
    def on_label_click(self, event):
        label_text = event.GetEventObject().GetLabel()
        wx.LaunchDefaultBrowser(label_text)


    def EditInfo(self,event):
        dialog = EditInfo(self, email=self.email_label.GetLabel(),url = self.url_label.GetLabel())
        result = dialog.ShowModal()
        if result ==wx.ID_SAVE:
            email = dialog.GetEmail()
            url = dialog.GetURL()

        dialog.Destroy()
        self.email_label.SetLabel(email)
        self.url_label.SetLabel(url)
        
        event.Skip()

    def UpdateData(self, event):  # wxGlade: InfoDialog.<event_handler>
        print('save')
        print(self.site,self.user_id)
        cursor.execute('UPDATE Sites SET email = ?, url =? WHERE site= ? AND user_id = ?',(self.email_label.GetLabel(),self.url_label.GetLabel(),self.site,self.user_id))
        connection.commit()
        
        

class EditInfo(wx.Dialog):
    def __init__(self, *args, email ='' , url = '',**kwds):
        # begin wxGlade: EditInfo.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((400, 250))
        self.SetTitle("dialog_5")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        enter_pin_label_copy_1 = wx.StaticText(self, wx.ID_ANY, "Edit Email And URL : ", style=wx.ALIGN_CENTER_HORIZONTAL)
        enter_pin_label_copy_1.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Javanese Text"))
        sizer_1.Add(enter_pin_label_copy_1, 2, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 10)

        sizer_1.Add((0, 0), 0, 0, 0)

        grid_sizer_1 = wx.GridSizer(2, 2, 0, 2)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)

        enter_email_label = wx.StaticText(self, wx.ID_ANY, "EMAIL :", style=wx.ALIGN_CENTER_HORIZONTAL)
        enter_email_label.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Javanese Text"))
        grid_sizer_1.Add(enter_email_label, 2, wx.ALIGN_RIGHT | wx.ALL, 10)

        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, f"{email}")
        self.text_ctrl_1.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_1.Add(self.text_ctrl_1, 1, wx.BOTTOM | wx.RIGHT | wx.TOP, 10)

        enter_URL_label_copy = wx.StaticText(self, wx.ID_ANY, "URL :", style=wx.ALIGN_CENTER_HORIZONTAL)
        enter_URL_label_copy.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Javanese Text"))
        grid_sizer_1.Add(enter_URL_label_copy, 2, wx.ALIGN_RIGHT | wx.ALL, 10)

        self.text_ctrl_2 = wx.TextCtrl(self, wx.ID_ANY, f"{url}")
        self.text_ctrl_2.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_1.Add(self.text_ctrl_2, 1, wx.BOTTOM | wx.RIGHT | wx.TOP, 10)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_1 = wx.Button(self, wx.ID_CANCEL, "")
        self.button_1.SetDefault()
        sizer_2.AddButton(self.button_1)

        self.button_OK = wx.Button(self, wx.ID_SAVE, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        sizer_2.Realize()

        self.SetSizer(sizer_1)

        self.SetAffirmativeId(self.button_OK.GetId())

        self.Layout()
    def GetEmail(self):
        return self.text_ctrl_1.GetValue()
    def GetURL(self):
        return self.text_ctrl_2.GetValue()
    
class Settings(wx.Dialog):
    def __init__(self, *args,username='',password='',pin ='',hashed_pass ='', **kwds):
        # begin wxGlade: Settings.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((500, 400))
        self.SetTitle("dialog_4")
        self.username = username
        self.password = password
        self.pin = pin
        self.hashed_pass = hashed_pass

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)

        label_1 = wx.StaticText(self, wx.ID_ANY, "Change Login Info", style=wx.ALIGN_CENTER_HORIZONTAL)
        label_1.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Javanese Text"))
        sizer_3.Add(label_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        grid_sizer_1 = wx.GridSizer(1, 2, 0, 0)
        sizer_3.Add(grid_sizer_1, 1, wx.EXPAND, 0)

        label_2 = wx.StaticText(self, wx.ID_ANY, "Username :")
        label_2.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_1.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.BOTTOM | wx.RIGHT, 18)

        self.text_ctrl_5 = wx.TextCtrl(self, wx.ID_ANY, f"{username}")
        self.text_ctrl_5.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_1.Add(self.text_ctrl_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM, 22)

        grid_sizer_3 = wx.GridSizer(1, 2, 0, 0)
        sizer_3.Add(grid_sizer_3, 1, wx.EXPAND, 0)

        label_4 = wx.StaticText(self, wx.ID_ANY, "Password :")
        label_4.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_3.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.BOTTOM | wx.RIGHT, 20)

        self.text_ctrl_3 = wx.TextCtrl(self, wx.ID_ANY, f"{password}")
        self.text_ctrl_3.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_3.Add(self.text_ctrl_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM, 22)

        grid_sizer_4 = wx.GridSizer(1, 2, 0, 0)
        sizer_3.Add(grid_sizer_4, 1, wx.EXPAND, 0)

        label_7 = wx.StaticText(self, wx.ID_ANY, "Pin :")
        label_7.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_4.Add(label_7, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.RIGHT, 41)

        self.text_ctrl_4 = wx.TextCtrl(self, wx.ID_ANY, f"{pin}")
        self.text_ctrl_4.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Javanese Text"))
        grid_sizer_4.Add(self.text_ctrl_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 18)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_SAVE = wx.Button(self, wx.ID_ANY, "Save")
        sizer_2.Add(self.button_SAVE, 0, 0, 0)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.SetSizer(sizer_1)

        self.SetAffirmativeId(self.button_SAVE.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.UpdateData, self.button_SAVE)
        # end wxGlade

    def UpdateData(self, event):  # wxGlade: Settings.<event_handler>
        updated_username = self.text_ctrl_5.GetValue()
        updated_password = self.text_ctrl_3.GetValue()
        updated_pin = self.text_ctrl_4.GetValue()
        
        if (self.username == updated_username) and (self.password == updated_password) and (self.pin == updated_pin):
            self.Destroy()
        else:
            cursor.execute('SELECT username FROM Users WHERE username = ?',(updated_username,))
            result = cursor.fetchone()
            if result:
                dlg = wx.Dialog(self, wx.ID_ANY, "Error")
                msg = wx.StaticText(dlg, wx.ID_ANY, "Username Already Exists")
                ok_button = wx.Button(dlg, wx.ID_OK, "OK")
                
                sizer = wx.BoxSizer(wx.VERTICAL)
                sizer.Add(msg, 0, wx.ALL, 10)
                sizer.Add(ok_button, 0, wx.ALL | wx.ALIGN_CENTER, 10)
                
                dlg.SetSizerAndFit(sizer)
                dlg.Center()
                
                result = dlg.ShowModal()
                
                if result == wx.ID_OK:
                    dlg.Destroy()
                 

            else:

                updated_password_hash = hashlib.sha256(updated_password.encode()).hexdigest()
                cursor.execute('SELECT * FROM Users')
                sites_data = cursor.fetchall()
                print("User data USER/PASSword INTIAL")
                for row in sites_data:
                    print(row)


                cursor.execute('UPDATE Users set username = ?,password = ? WHERE username = ?',(updated_username,updated_password_hash,self.username))
                connection.commit()
                cursor.execute('SELECT * FROM Users')
                sites_data = cursor.fetchall()
                print("User data USER/PASSword SHOULD BE CHANGED:")
                for row in sites_data:
                    print(row)


                previous_key = MyFrame.MasterKey(self,pin=self.pin,password=self.hashed_pass,username=self.username)
                print(previous_key,'SHOULD BE SAME AS INTIAL KEY\n TESTSTSTSST')
                cursor.execute('UPDATE Sites SET user_id = ? WHERE user_id = ?',(updated_username,self.username))
                connection.commit()
                cursor.execute('SELECT password,site FROM Sites WHERE user_id =?',(updated_username,))
                passwords_sites = cursor.fetchall()
                passwords = [row[0] for row in passwords_sites]
                sites = [row[1] for row in passwords_sites]
                print(sites)
                print(passwords)
                cursor.execute('SELECT * FROM Sites')
                sites_data = cursor.fetchall()
                print("Sites data USER_ID SHOULD BE CHANGED:")
                for row in sites_data:
                    print(row)

                decoded_passwords =[]
                for password in passwords:
                    print(password)
                    print(previous_key.decrypt(password))
                    decoded_passwords.append( MyFrame.Decryption(self,previous_key,password))

                
                print(updated_password,updated_password_hash)

                key = MyFrame.MasterKey(self,pin=updated_pin,password=updated_password_hash,username=updated_username)
                for index,password in enumerate(decoded_passwords):
                    password = password.decode()
                    enc_password = MyFrame.Encryption(self,key,password) 
                    cursor.execute('UPDATE Sites SET password = ? WHERE user_id = ? AND site = ?',(enc_password,updated_username,sites[index]))


                connection.commit()
                
                cursor.execute('SELECT * FROM Sites')
                sites_data = cursor.fetchall()
                print("Sites data PASSWORD SHOULD BE DIFF:")
                for row in sites_data:
                    print(row)
                
                


#end
    
class MyApp(wx.App):
    def OnInit(self):
        dialog = LoginDialog(None,wx.ID_ANY, "Login")
        result = dialog.ShowModal()
        
        if result == wx.ID_OK and dialog.GetResult():

            if dialog.GetNewAccount():
                pin_dialog = CreatePin(None,wx.ID_ANY, 'Create Pin')
                result = pin_dialog.ShowModal()
                
                if result == wx.ID_OK:
                    pin = pin_dialog.GetPin()
                    print(pin)

            else:
                pin_dialog= Pin(None,wx.ID_ANY, 'Enter Pin')
                result = pin_dialog.ShowModal()

                if result == wx.ID_OK:
                    pin = pin_dialog.GetPin()
                    print(pin)
           
            pin_dialog.Destroy()
            
            dialog.Destroy()

            self.frame = MyFrame(None, wx.ID_ANY, size=(800, 500), title="Password Manager", Username=dialog.GetUsername(),pin = pin,hashed_pass=dialog.GetPassHash())
            self.SetTopWindow(self.frame)
            self.frame.Show()

        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
    connection.commit()
    connection.close()
